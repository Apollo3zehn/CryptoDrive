@page "/"

@inject IJSRuntime JsRuntime
@inherits AppStateComponentBase

<div>
    @if (this.AppState.IsSignedIn)
    {
        <MatHeadline6>Sync Folders</MatHeadline6>

        @if (this.AppState.ActiveSyncSettings.SyncFolderPairs.Any())
        {
            <ul class="list-group">
                @foreach (var syncFolderPair in this.AppState.ActiveSyncSettings.SyncFolderPairs)
                {
                    <li class="list-group-item mb-4">
                        <SyncFolderPairView DataContext="syncFolderPair" />
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="no-sync-folder-pairs">
                I couldn't find any sync folder pairs. Simply add new one to get started (only one-way sync is supported).
            </div>
        }

        @if (!this.AppState.Config.IsSyncEnabled)
        {
            <MatButton Icon="create_new_folder"
                       @onclick="this.AppState.InitializeAddEditSyncFolderDialog">
            </MatButton>
        }

        @if (this.AppState.ActiveSyncSettings.SyncFolderPairs.Any())
        {
            @if (!this.AppState.Config.IsSyncEnabled)
            {
                <MatButton @onclick="this.AppState.StartSync">
                    <i class="fas fa-sync"></i>&nbsp; Start
                </MatButton>
            }
            else
            {
                <MatButton @onclick="async () => await this.AppState.StopSyncAsync()">
                    <i class="fas fa-sync"></i>&nbsp; Stop
                </MatButton>
            }
        }
    }
    else
    {
        <div class="jumbotron">
            <h1 class="display-4">Hello, Human!</h1>
            <p class="lead">Here is your Crypto Drive speaking. Together we will safely backup your data without the need to trust anyone but you (and me)!</p>
            <hr class="my-4">
            <p>Sign-in to your Microsoft account to start your encrypted backup. You will get asked for some permissions that allow me to sync your files automagically.</p>

            <div class="sign-in">
                <MatButton @onclick="this.AppState.SignInAsync">
                    <i class="fas fa-sign-in-alt"></i>&nbsp;&nbsp;&nbsp;Sign In
                </MatButton>
            </div>
        </div>
    }
</div>

@if (this.AppState.SelectedSyncFolderPair != null)
{
    <EditForm Model="this.AppState.SelectedSyncFolderPairEdit" OnValidSubmit="this.AppState.AddOrUpdateSyncFolderPair">
        <DataAnnotationsValidator />

        <MatDialog @bind-IsOpen="this.AppState.ShowSyncFolderAddEditDialog"
                   CanBeClosed="false">
            <MatDialogTitle>Hello, Human!</MatDialogTitle>
            <MatDialogContent>
                <p>Where should I look for your data to be synced?</p>

                @if (this.AppState.ShowSyncFolderAddEditDialog)
                {
                    <SyncFolderPairEditView DataContext="this.AppState.SelectedSyncFolderPairEdit" />
                }
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="() => this.AppState.ShowSyncFolderAddEditDialog = false">
                    Cancel
                </MatButton>
                <MatButton Type="submit">
                    Apply
                </MatButton>
            </MatDialogActions>
        </MatDialog>

    </EditForm>
}


<MatDialog @bind-IsOpen="this.AppState.ShowSyncFolderRemoveDialog"
           CanBeClosed="false">
    <MatDialogTitle>Hello, Human!</MatDialogTitle>
    <MatDialogContent>
        <p>Do you want me to stop syncing this folder pair?</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => this.AppState.ShowSyncFolderRemoveDialog = false">No Thanks</MatButton>
        <MatButton OnClick="this.AppState.RemoveSyncFolderPair">Yes!</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="this.AppState.ShowKeyDialog"
           CanBeClosed="false">
    <MatDialogTitle>Hello, Human!</MatDialogTitle>
    <MatDialogContent>
        <p>This is your super-secret secret-key to encryp and decrypt your data. You must promise me to print or make a photo of it and then store it safely.</p>
        <MatStringField Id="SuperSecretKey"
                        ReadOnly="true"
                        Icon="file_copy"
                        IconOnClick="() => JsInterop.CopyToClipboard(this.JsRuntime, this.AppState.Config.SymmetricKey)"
                        @bind-Value="this.AppState.Config.SymmetricKey"
                        Label="Super-secret secret key">
        </MatStringField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="this.AppState.ConfirmKeyIsSecured">I hereby promise high and holy that I copied the key.</MatButton>
    </MatDialogActions>
</MatDialog>